let n:int;
fn Merge(array[10]:int, low:int, middle:int, high:int)->int
{
    let n1:int;
    n1 = middle - low + 1;
    let n2:int;
    n2 = high - middle;
    let L[10]:int;
    let R[10]:int;
    let i:int;
    i = 0;
    let j:int;
    j = 0;
    let temp:int;
    while(i < n1){
        temp = i + low;
        L[i] = array[temp];
        i = i + 1;        
    }
    while(j < n2){
        temp = j + middle  +1;
        R[j] = array[temp];
        j = j + 1;        
    }
    i = 0;
    j = 0;
    let k:int;
    k = low;
    while((i!=n1) && (j!= n2))
    {   
        if(L[i] < (R[j] + 1)){
            array[k] = L[i];
            k = k + 1;
            i = i + 1;
        }
        else{
            array[k] = R[j];
            k = k + 1;
            j = j + 1;
        }
    }
    while(i < n1){
        array[k] = L[i];
        k = k + 1;
        i = i + 1;
    }
    while(j < n2){
        array[k] = R[j];
        k = k + 1;
        j = j + 1;
    }
    ret 0;
}
 
fn MergeSort(array[10]:int, p:int, q:int)->int
{
    if(p < q)
    {
        let mid:int;
        mid = (p+q)/2;
        let tmp:int;
        tmp = MergeSort(array, p, mid);
        tmp = mid + 1;
        tmp = MergeSort(array, tmp, q);
        tmp = Merge(array,p, mid, q);
    }
    ret 0;
}

fn main()->int{
    n = 10;
    let a[10]:int;
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    let i:int;
    i = 0;
    let tmp:int;
    tmp = n - 1;
    i = MergeSort(a, i, tmp);
    while (i < n) {
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    ret 0;
}
