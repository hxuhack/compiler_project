fn canJump(nums[10]:int, n:int)->int {
    if(n == 1)
    {
        ret 1;
    }
    if(nums[0] > (n - 2))
    {
        ret 1;
    }
    let dp[10]:int;
    let i:int;
    i = 0;
    while(i<(n-1)){
        dp[i] = 0;
        i = i+1;
    }
    let temp:int = n - 1;
    dp[temp] = 1;
    i = n - 2;
    while(i > -1){
        let j:int;
        if(nums[i] < (n - 1 - i)){
            j = nums[i];
        }
        else
        {
            j = n - 1 - i;
        }
        while(j > -1){
            temp = i+j;
            if(dp[temp] != 0){
                dp[i] = 1;
            }
            j = j - 1;
        }
        i = i - 1;
    }

    ret dp[0];
}
fn main()->int{
    let res:int;
    let a[10]:int;
    a[0]=3;a[1]=3;a[2]=9;a[3]=0;a[4]=0;
    a[5]=1;a[6]=1;a[7]=5;a[8]=7;a[9]=8;
    res = 10;
    res = canJump(a, res);
    ret res;
}