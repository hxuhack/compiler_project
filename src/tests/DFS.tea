fn quickread()->int{
	let ch:int = getch();
	let x:int = 0;
	let f:int = 0;
	while ((ch < 48) || (ch > 57)){
		if((ch == 45)){
			f = 1;
		} 
		ch = getch();
	}
	while ((ch >= 48) && (ch <=57)){
		x = x * 10 + ch - 48;
		ch = getch();
	}
	if ((f != 0)){
		ret -x;
	}else{
		ret x;
	}
}

let n:int;
let m:int;
let to[5005]:int;
let next[5005]:int;
let head[1005]:int;
let cnt:int = 0;
let vis[1005]:int;

fn addedge(from:int, To:int){
	to[cnt] = To;
	next[cnt] = head[from];
	head[from] = cnt;
	cnt = cnt + 1;
	to[cnt] = from;
	next[cnt] = head[To];
	head[To] = cnt;
	cnt = cnt + 1;
}

fn init(){
	let i:int = 0;
	while (i < 1005){
		head[i] = -1;
		i = i + 1;
	}
}

fn clear(){
	let i:int = 1;
	while (i <= n){
		vis[i] = 0;
		i = i + 1;
	}
}

fn same(x:int, tar:int)->int{
	vis[x] = 1;
	if (x == tar){
		ret 1;
	}
	let i:int = head[x];
	while (i != -1){
		let y:int = to[i];
		if (vis[y]==0 && same(y,tar) != 0){
			ret 1;
		}
		i = next[i];
	}
	ret 0;
}

fn main()->int{
	n = quickread(); m = quickread();
	init();
	let ch:int = 0;
	let x:int = 0;
	let y:int = 0;
	while (m != 0){
		ch = getch();
		while (ch != 81 && ch != 85){
			ch = getch();
		}
		if (ch == 81){ // query
			x = quickread(); y = quickread();
            clear();
			putint(same(x, y));
			putch(10);
		}else{ // union
			x = quickread(); y = quickread();
			addedge(x, y);
		}
		m = m - 1;
	}
	ret 0;
}