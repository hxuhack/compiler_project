let n:int;
fn swap (array[10]:int, i:int, j:int)->int{
    let temp:int;
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
    ret 0;  
}
fn heap_ajust(arr[10]:int, start:int, end:int)->int {  
    let dad:int;
    dad = start;  
    let son:int;
    son = dad * 2 + 1;  
    while (son < (end + 1)) { //   
        let temp:int = son + 1;
        if (son < end && arr[son] < arr[temp])
            {son = son + 1;  }
        if (arr[dad] > arr[son])
            {ret 0;}  
        else {
            dad = swap(arr,dad,son);  
            dad = son;  
            son = dad * 2 + 1;  
        }  
    }  
    ret 0;  
}  
fn heap_sort(arr[10]:int, len:int)->int {  
    let i:int;  
    let tmp:int;
    i = len / 2 - 1;
    while ( i > -1) {
        tmp = len - 1;
        tmp = heap_ajust(arr, i, tmp);  
        i = i - 1;
    }    
    i = len - 1;   
    while ( i > 0) {  
        let tmp0:int;
        tmp0 = 0;
        tmp = swap(arr,tmp0,i);
        tmp = i - 1;
        tmp = heap_ajust(arr, tmp0, tmp);  
        i = i-1;
    }  
    ret 0;
}  

fn main()->int{
    n = 10;
    let a[10]:int;
    a[0]=4;a[1]=3;a[2]=9;a[3]=2;a[4]=0;
    a[5]=1;a[6]=6;a[7]=5;a[8]=7;a[9]=8;
    let i:int;
    i = 0;
    i = heap_sort(a, n);
    while (i < n) {
        let tmp:int;
        tmp = a[i];
        putint(tmp);
        tmp = 10;
        putch(tmp);
        i = i + 1;
    }
    ret 0;
}
